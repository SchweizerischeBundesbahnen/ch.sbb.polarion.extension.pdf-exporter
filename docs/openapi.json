{
  "openapi": "3.0.1",
  "info": {
    "title": "PDF Exporter REST API",
    "version": "v1"
  },
  "paths": {
    "/api/checknestedlists": {
      "post": {
        "operationId": "checkNestedLists",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportParams"
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedListsCheck"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Checks whether document contains nested lists",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/configuration/cors-config": {
      "get": {
        "operationId": "checkCORSConfig",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationStatus"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Checks CORS configuration"
      }
    },
    "/api/configuration/default-settings": {
      "get": {
        "operationId": "checkDefaultSettings",
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationStatus"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Checks default settings configuration"
      }
    },
    "/api/configuration/dle-toolbar-config": {
      "get": {
        "operationId": "checkDleToolbarConfig",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationStatus"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Checks DLE Toolbar configuration"
      }
    },
    "/api/configuration/document-properties-pane-config": {
      "get": {
        "operationId": "checkDocumentPropertiesPaneConfig",
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationStatus"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Checks document properties pane configuration"
      }
    },
    "/api/configuration/live-report-config": {
      "get": {
        "operationId": "checkLiveReportConfig",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationStatus"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Checks Live Report configuration"
      }
    },
    "/api/configuration/weasyprint": {
      "get": {
        "operationId": "checkWeasyPrint",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationStatus"
                  },
                  "type": "array"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Checks WeasyPrint configuration"
      }
    },
    "/api/context": {
      "get": {
        "operationId": "getContext",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns basic context information of Polarion's extension",
        "tags": [
          "Extension Information"
        ]
      }
    },
    "/api/convert": {
      "post": {
        "operationId": "convertToPdf",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/pdf": {}
            },
            "description": "Content of PDF document as a byte array"
          }
        },
        "summary": "Returns requested Polarion's document converted to PDF",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/convert/html": {
      "post": {
        "operationId": "convertHtmlToPdf",
        "parameters": [
          {
            "description": "default value: portrait",
            "in": "query",
            "name": "orientation",
            "schema": {
              "enum": [
                "PORTRAIT",
                "LANDSCAPE"
              ],
              "type": "string"
            }
          },
          {
            "description": "default value: A4",
            "in": "query",
            "name": "paperSize",
            "schema": {
              "enum": [
                "A5",
                "A4",
                "A3",
                "B5",
                "B4",
                "JIS_B5",
                "JIS_B4",
                "LETTER",
                "LEGAL",
                "LEDGER"
              ],
              "type": "string"
            }
          },
          {
            "description": "default value: document.pdf",
            "in": "query",
            "name": "fileName",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/html": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "input html (must include html and body elements)"
        },
        "responses": {
          "200": {
            "content": {
              "application/pdf": {}
            },
            "description": "Content of PDF document as a byte array"
          }
        },
        "summary": "Converts input HTML to PDF",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/convert/jobs": {
      "get": {
        "operationId": "getAllPdfConverterJobs",
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Conversion jobs statuses"
          }
        },
        "summary": "Returns all active PDF conversion jobs statuses",
        "tags": [
          "PDF Processing"
        ]
      },
      "post": {
        "operationId": "startPdfConverterJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportParams"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Conversion process is started, job URI is returned in Location header"
          }
        },
        "summary": "Starts asynchronous conversion job of Polarion's document to PDF",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/convert/jobs/{id}": {
      "get": {
        "operationId": "getPdfConverterJobStatus",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/*": {}
            },
            "description": "Conversion job is still in progress"
          },
          "303": {
            "content": {
              "application/*": {}
            },
            "description": "Conversion job is finished successfully, Location header contains result URL"
          },
          "404": {
            "description": "Conversion job id is unknown"
          },
          "409": {
            "content": {
              "application/json": {}
            },
            "description": "Conversion job is failed or cancelled"
          }
        },
        "summary": "Returns PDF conversion job status",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/convert/jobs/{id}/result": {
      "get": {
        "operationId": "getPdfConverterJobResult",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {}
            },
            "description": "Conversion job result is ready"
          },
          "204": {
            "description": "Conversion job is still in progress"
          },
          "404": {
            "description": "Conversion job id is unknown"
          },
          "409": {
            "description": "Conversion job is failed, cancelled or result is unreachable"
          }
        },
        "summary": "Returns PDF conversion job result",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/document-language": {
      "get": {
        "operationId": "getDocumentLanguage",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "spaceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "documentName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "revision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Gets language of specified Polarion's document, defined in its custom field 'docLanguage'",
        "tags": [
          "Utility resources"
        ]
      }
    },
    "/api/export-filename": {
      "get": {
        "operationId": "getFileName",
        "parameters": [
          {
            "in": "query",
            "name": "locationPath",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "revision",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "documentType",
            "schema": {
              "enum": [
                "DOCUMENT",
                "WIKI",
                "REPORT"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Gets a filename, prepared with velocity and placeholders",
        "tags": [
          "Utility resources"
        ]
      }
    },
    "/api/link-role-names": {
      "get": {
        "operationId": "readLinkRoleNames",
        "parameters": [
          {
            "description": "Project scope in form project/<PROJECT_ID>/",
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Gets list of possible WorkItem link role names in specified project scope",
        "tags": [
          "Utility resources"
        ]
      }
    },
    "/api/prepared-html-content": {
      "post": {
        "operationId": "prepareHtmlContent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/html": {}
            },
            "description": "Prepared HTML content"
          }
        },
        "summary": "Returns prepared HTML which will be used for PDF conversion using WeasyPrint",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/projects/{projectId}/name": {
      "get": {
        "operationId": "getProjectName",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Gets name of specified Polarion's project",
        "tags": [
          "Utility resources"
        ]
      }
    },
    "/api/settings": {
      "get": {
        "operationId": "readFeaturesList_1",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns the complete list of all supported features",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/cover-page/names/{name}/images": {
      "delete": {
        "operationId": "deleteImages",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "summary": "Deletes images in SVN linked to specified cover page within specified scope (global or certain project)",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/cover-page/templates": {
      "get": {
        "operationId": "getCoverPageTemplateNames",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get list of cover page predefined template names",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/cover-page/templates/{template}": {
      "post": {
        "operationId": "persistCoverPageTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {}
            },
            "description": "default response"
          }
        },
        "summary": "Persist content of cover page predefined template",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/localization/names/{name}/download": {
      "get": {
        "operationId": "downloadTranslations",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "language",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "revision",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/xml": {}
            },
            "description": "default response"
          }
        },
        "summary": "Downloads localization values by name of localization settings",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/localization/upload": {
      "post": {
        "operationId": "uploadTranslations",
        "parameters": [
          {
            "in": "query",
            "name": "language",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/FormDataBodyPart"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Uploads localization values",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/default-content": {
      "get": {
        "operationId": "getDefaultValues_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns default values of specified setting",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names": {
      "get": {
        "operationId": "readSettingNames_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SettingName"
                  },
                  "type": "array"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns names of specified setting",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names/{name}": {
      "delete": {
        "operationId": "deleteSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "summary": "Deletes specified setting by id",
        "tags": [
          "Settings"
        ]
      },
      "post": {
        "operationId": "renameSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {}
            },
            "description": "default response"
          }
        },
        "summary": "Updates name of specified named setting",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names/{name}/content": {
      "get": {
        "operationId": "readSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "revision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns values (content) of specified setting by its id and revision",
        "tags": [
          "Settings"
        ]
      },
      "put": {
        "operationId": "saveSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {}
            },
            "description": "default response"
          }
        },
        "summary": "Creates or updates named setting. Creation scenario will use default setting value if no body specified in the request.",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names/{name}/revisions": {
      "get": {
        "operationId": "readRevisionsList_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Revision"
                  },
                  "type": "array"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns revisions history of specified setting with specified id",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/validate": {
      "post": {
        "operationId": "validatePdfWidth",
        "parameters": [
          {
            "description": "Limit of 'invalid' pages in response",
            "in": "query",
            "name": "max-results",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportParams"
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidthValidationResult"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Validates if requested Polarion's document been converted to PDF doesn't contain pages which content exceeds page's width",
        "tags": [
          "PDF Processing"
        ]
      }
    },
    "/api/version": {
      "get": {
        "operationId": "getVersion",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns version of Polarion's extension",
        "tags": [
          "Extension Information"
        ]
      }
    },
    "/api/webhooks/status": {
      "get": {
        "operationId": "getWebhooksStatus",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhooksStatus"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Returns boolean value telling if webhooks are enabled or not",
        "tags": [
          "Utility resources"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BodyPart": {
        "properties": {
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "mediaType": {
            "properties": {
              "parameters": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "subtype": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "wildcardSubtype": {
                "type": "boolean"
              },
              "wildcardType": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parameterizedHeaders": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              },
              "type": "array"
            },
            "type": "object"
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "ConfigurationStatus": {
        "properties": {
          "details": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "OK",
              "WARNING",
              "ERROR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContentDisposition": {
        "properties": {
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "parameters": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "readDate": {
            "format": "date-time",
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Context": {
        "properties": {
          "baseUrl": {
            "type": "string"
          },
          "extensionContext": {
            "type": "string"
          },
          "restUrl": {
            "type": "string"
          },
          "swaggerUiUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportParams": {
        "properties": {
          "chapters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "coverPage": {
            "type": "string"
          },
          "css": {
            "type": "string"
          },
          "cutEmptyChapters": {
            "type": "boolean"
          },
          "cutEmptyWIAttributes": {
            "type": "boolean"
          },
          "cutLocalUrls": {
            "type": "boolean"
          },
          "documentType": {
            "enum": [
              "DOCUMENT",
              "WIKI",
              "REPORT"
            ],
            "type": "string"
          },
          "enableCommentsRendering": {
            "type": "boolean"
          },
          "fitToPage": {
            "type": "boolean"
          },
          "followHTMLPresentationalHints": {
            "type": "boolean"
          },
          "headerFooter": {
            "type": "string"
          },
          "headersColor": {
            "type": "string"
          },
          "internalContent": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "linkedWorkitemRoles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "localization": {
            "type": "string"
          },
          "locationPath": {
            "type": "string"
          },
          "markReferencedWorkitems": {
            "type": "boolean"
          },
          "numberedListStyles": {
            "type": "string"
          },
          "orientation": {
            "enum": [
              "PORTRAIT",
              "LANDSCAPE"
            ],
            "type": "string"
          },
          "paperSize": {
            "enum": [
              "A5",
              "A4",
              "A3",
              "B5",
              "B4",
              "JIS_B5",
              "JIS_B4",
              "LETTER",
              "LEGAL",
              "LEDGER"
            ],
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "urlQueryParameters": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "watermark": {
            "type": "boolean"
          },
          "webhooks": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormDataBodyPart": {
        "properties": {
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "formDataContentDisposition": {
            "$ref": "#/components/schemas/FormDataContentDisposition"
          },
          "headers": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "mediaType": {
            "properties": {
              "parameters": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "subtype": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "wildcardSubtype": {
                "type": "boolean"
              },
              "wildcardType": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "name": {
            "type": "string"
          },
          "parameterizedHeaders": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              },
              "type": "array"
            },
            "type": "object"
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "type": "object"
          },
          "simple": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormDataContentDisposition": {
        "properties": {
          "creationDate": {
            "format": "date-time",
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "modificationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "readDate": {
            "format": "date-time",
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MessageBodyWorkers": {
        "type": "object"
      },
      "MultiPart": {
        "properties": {
          "bodyParts": {
            "items": {
              "$ref": "#/components/schemas/BodyPart"
            },
            "type": "array"
          },
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "mediaType": {
            "properties": {
              "parameters": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "subtype": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "wildcardSubtype": {
                "type": "boolean"
              },
              "wildcardType": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parameterizedHeaders": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              },
              "type": "array"
            },
            "type": "object"
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "NestedListsCheck": {
        "properties": {
          "containsNestedLists": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PageInfo": {
        "properties": {
          "content": {
            "type": "string"
          },
          "number": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ParameterizedHeader": {
        "properties": {
          "parameters": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Revision": {
        "properties": {
          "author": {
            "type": "string"
          },
          "baseline": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SettingName": {
        "properties": {
          "name": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SettingsModel": {
        "properties": {
          "bundleTimestamp": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Version": {
        "properties": {
          "automaticModuleName": {
            "type": "string"
          },
          "bundleBuildTimestamp": {
            "type": "string"
          },
          "bundleBuildTimestampDigitsOnly": {
            "type": "string"
          },
          "bundleName": {
            "type": "string"
          },
          "bundleVendor": {
            "type": "string"
          },
          "bundleVersion": {
            "type": "string"
          },
          "projectURL": {
            "type": "string"
          },
          "supportEmail": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebhooksStatus": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "WidthValidationResult": {
        "properties": {
          "invalidPages": {
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            },
            "type": "array"
          },
          "suspiciousWorkItems": {
            "items": {
              "$ref": "#/components/schemas/WorkItemRefData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WorkItemRefData": {
        "properties": {
          "id": {
            "type": "string"
          },
          "layout": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}
